{"version":3,"file":"magicbutton-sdk.umd.js","sources":["../src/lib/graph/types.ts","../src/lib/sdk/content-sdk.ts"],"sourcesContent":["/**\n * User State Graph Types\n * \n * Core type definitions for the graph-based user state management system.\n * Every user interaction, page visit, and data point becomes a node in this graph.\n */\n\n// ============================================================================\n// Core Graph Types\n// ============================================================================\n\n/**\n * Unique identifier for graph nodes and edges\n */\nexport type NodeId = string;\nexport type EdgeId = string;\n\n/**\n * Timestamp in milliseconds since epoch\n */\nexport type Timestamp = number;\n\n/**\n * Node types represent different kinds of entities in the user's browsing experience\n */\nexport enum NodeType {\n  // Web browsing\n  PAGE = 'page',                    // Web page visit\n  DOMAIN = 'domain',                // Website domain\n  URL_PATTERN = 'url_pattern',      // URL pattern or route\n  \n  // Content and data\n  CONTENT = 'content',              // Page content or text snippet\n  IMAGE = 'image',                  // Image or media\n  LINK = 'link',                    // Hyperlink\n  FORM = 'form',                    // Form interaction\n  \n  // User actions\n  ACTION = 'action',                // User action (click, scroll, etc.)\n  SEARCH = 'search',                // Search query\n  INPUT = 'input',                  // User input or data entry\n  \n  // Entities and objects\n  PERSON = 'person',                // Person or user\n  ORGANIZATION = 'organization',     // Company or organization\n  PRODUCT = 'product',              // Product or service\n  DOCUMENT = 'document',            // Document or file\n  \n  // Tools and applications\n  TOOL = 'tool',                    // External tool or application\n  WORKFLOW = 'workflow',            // Workflow or process\n  PLAYBOOK = 'playbook',            // Automation playbook\n  \n  // Meta and system\n  SESSION = 'session',              // Browsing session\n  CONTEXT = 'context',              // Context or situation\n  INTENT = 'intent',                // User intent or goal\n  TAG = 'tag',                      // Classification tag\n  NOTE = 'note',                    // User annotation or note\n}\n\n/**\n * Edge types represent relationships between nodes\n */\nexport enum EdgeType {\n  // Navigation relationships\n  NAVIGATED_TO = 'navigated_to',        // User navigated from A to B\n  CONTAINS = 'contains',                // A contains B (page contains link)\n  REFERENCES = 'references',            // A references B (page references person)\n  \n  // Temporal relationships\n  FOLLOWED_BY = 'followed_by',          // A was followed by B in time\n  TRIGGERED_BY = 'triggered_by',        // A was triggered by B\n  \n  // Semantic relationships\n  RELATED_TO = 'related_to',            // A is related to B\n  SIMILAR_TO = 'similar_to',            // A is similar to B\n  PART_OF = 'part_of',                  // A is part of B\n  INSTANCE_OF = 'instance_of',          // A is an instance of B\n  \n  // Action relationships\n  PERFORMED_ON = 'performed_on',        // Action performed on target\n  USED_WITH = 'used_with',              // Tool used with content\n  CREATED = 'created',                  // A created B\n  MODIFIED = 'modified',                // A modified B\n  \n  // User intent relationships\n  INTERESTED_IN = 'interested_in',      // User interested in topic\n  WORKING_ON = 'working_on',            // User working on project\n  SEARCHING_FOR = 'searching_for',      // User searching for information\n  \n  // Tool and workflow relationships\n  AUTOMATED_BY = 'automated_by',        // A is automated by tool B\n  ENHANCED_BY = 'enhanced_by',          // A is enhanced by tool B\n  DEPENDS_ON = 'depends_on',            // A depends on B\n}\n\n/**\n * Data source indicates how the node/edge was created\n */\nexport enum DataSource {\n  SCRAPING = 'scraping',           // Automatically scraped from page\n  SDK = 'sdk',                     // Provided by page SDK\n  USER_INPUT = 'user_input',       // Explicitly entered by user\n  TOOL_UPDATE = 'tool_update',     // Updated by external tool\n  INFERENCE = 'inference',         // Inferred from other data\n  IMPORT = 'import',               // Imported from external source\n  API = 'api',                     // Retrieved from API\n}\n\n/**\n * Confidence level for inferred or uncertain data\n */\nexport enum ConfidenceLevel {\n  CERTAIN = 1.0,      // Explicitly confirmed\n  HIGH = 0.8,         // Very likely correct\n  MEDIUM = 0.6,       // Probably correct\n  LOW = 0.4,          // Possibly correct\n  UNCERTAIN = 0.2,    // Unlikely but possible\n}\n\n// ============================================================================\n// Node Definition\n// ============================================================================\n\n/**\n * Core properties common to all nodes\n */\nexport interface BaseNodeData {\n  // Identity\n  title?: string;                   // Human-readable title\n  description?: string;             // Longer description\n  url?: string;                     // Associated URL (if applicable)\n  \n  // Content\n  content?: string;                 // Text content or data\n  metadata?: Record<string, any>;   // Flexible metadata storage\n  \n  // Classification\n  tags?: string[];                  // User-defined tags\n  categories?: string[];            // System categories\n  \n  // Quality and trust\n  confidence?: ConfidenceLevel;     // Confidence in data accuracy\n  verified?: boolean;               // Whether data has been verified\n  \n  // External references\n  externalId?: string;              // ID in external system\n  externalSource?: string;          // Name of external source\n}\n\n/**\n * Node-type specific data interfaces\n */\nexport interface PageNodeData extends BaseNodeData {\n  url: string;                      // Required for pages\n  title?: string;                   // Page title\n  favicon?: string;                 // Favicon URL\n  openGraph?: Record<string, string>; // OpenGraph metadata\n  scrollDepth?: number;             // How far user scrolled\n  timeOnPage?: number;              // Time spent on page (ms)\n  interactionCount?: number;        // Number of interactions\n}\n\nexport interface PersonNodeData extends BaseNodeData {\n  name?: string;                    // Person's name\n  email?: string;                   // Email address\n  role?: string;                    // Job title or role\n  organization?: string;            // Company or org\n  avatar?: string;                  // Profile image URL\n  socialProfiles?: Record<string, string>; // Social media profiles\n}\n\nexport interface ProductNodeData extends BaseNodeData {\n  name: string;                     // Product name\n  price?: number;                   // Price in base currency\n  currency?: string;                // Currency code\n  brand?: string;                   // Brand name\n  category?: string;                // Product category\n  rating?: number;                  // User rating\n  availability?: string;            // Availability status\n  images?: string[];                // Product images\n}\n\nexport interface ActionNodeData extends BaseNodeData {\n  actionType: string;               // Type of action (click, scroll, etc.)\n  target?: string;                  // What was acted upon\n  value?: any;                      // Action value or data\n  duration?: number;                // How long action took\n  coordinates?: { x: number; y: number }; // Screen coordinates\n}\n\n/**\n * Complete node definition\n */\nexport interface StateNode {\n  // Core identity\n  id: NodeId;\n  type: NodeType;\n  data: BaseNodeData;\n  \n  // Provenance\n  source: DataSource;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  createdBy?: string;               // User or system that created node\n  \n  // Context\n  sessionId?: string;               // Browser session ID\n  tabId?: number;                   // Chrome tab ID\n  windowId?: number;                // Chrome window ID\n  \n  // Relationships (for optimization)\n  inDegree?: number;                // Number of incoming edges\n  outDegree?: number;               // Number of outgoing edges\n  \n  // Lifecycle\n  version?: number;                 // Version for conflict resolution\n  deleted?: boolean;                // Soft delete flag\n  deletedAt?: Timestamp;            // When node was deleted\n}\n\n// ============================================================================\n// Edge Definition\n// ============================================================================\n\n/**\n * Edge properties and metadata\n */\nexport interface EdgeData {\n  // Core properties\n  weight?: number;                  // Edge strength/importance (0-1)\n  confidence?: ConfidenceLevel;     // Confidence in relationship\n  \n  // Metadata\n  metadata?: Record<string, any>;   // Flexible metadata\n  labels?: string[];                // Edge labels or annotations\n  \n  // Context\n  context?: string;                 // Context where relationship was observed\n  evidence?: string[];              // Evidence supporting the relationship\n  \n  // Temporal\n  startTime?: Timestamp;            // When relationship started\n  endTime?: Timestamp;              // When relationship ended (if applicable)\n  duration?: number;                // Duration of relationship\n  \n  // Quality\n  verified?: boolean;               // Whether relationship is verified\n  strength?: number;                // Relationship strength (0-1)\n}\n\n/**\n * Complete edge definition\n */\nexport interface StateEdge {\n  // Core identity\n  id: EdgeId;\n  type: EdgeType;\n  \n  // Connection\n  fromNodeId: NodeId;\n  toNodeId: NodeId;\n  \n  // Properties\n  data: EdgeData;\n  \n  // Provenance\n  source: DataSource;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  createdBy?: string;\n  \n  // Context\n  sessionId?: string;\n  tabId?: number;\n  \n  // Lifecycle\n  version?: number;\n  deleted?: boolean;\n  deletedAt?: Timestamp;\n}\n\n// ============================================================================\n// Graph Query Types\n// ============================================================================\n\n/**\n * Query criteria for finding nodes\n */\nexport interface NodeQuery {\n  // Identity filters\n  ids?: NodeId[];\n  types?: NodeType[];\n  \n  // Data filters\n  titleContains?: string;\n  urlMatches?: string | RegExp;\n  hasTag?: string;\n  hasCategory?: string;\n  \n  // Provenance filters\n  sources?: DataSource[];\n  createdAfter?: Timestamp;\n  createdBefore?: Timestamp;\n  createdBy?: string;\n  \n  // Context filters\n  sessionId?: string;\n  tabId?: number;\n  \n  // Quality filters\n  minConfidence?: ConfidenceLevel;\n  verified?: boolean;\n  \n  // Relationship filters\n  connectedTo?: NodeId;\n  hasIncomingEdge?: EdgeType;\n  hasOutgoingEdge?: EdgeType;\n  \n  // Pagination\n  limit?: number;\n  offset?: number;\n  \n  // Sorting\n  sortBy?: 'createdAt' | 'updatedAt' | 'title' | 'relevance';\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * Query criteria for finding edges\n */\nexport interface EdgeQuery {\n  // Identity filters\n  ids?: EdgeId[];\n  types?: EdgeType[];\n  \n  // Connection filters\n  fromNodeId?: NodeId;\n  toNodeId?: NodeId;\n  fromNodeTypes?: NodeType[];\n  toNodeTypes?: NodeType[];\n  \n  // Data filters\n  minWeight?: number;\n  maxWeight?: number;\n  minConfidence?: ConfidenceLevel;\n  \n  // Provenance filters\n  sources?: DataSource[];\n  createdAfter?: Timestamp;\n  createdBefore?: Timestamp;\n  \n  // Context filters\n  sessionId?: string;\n  tabId?: number;\n  \n  // Pagination\n  limit?: number;\n  offset?: number;\n  \n  // Sorting\n  sortBy?: 'createdAt' | 'weight' | 'confidence';\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * Traversal options for graph exploration\n */\nexport interface TraversalOptions {\n  // Depth control\n  maxDepth?: number;\n  minDepth?: number;\n  \n  // Edge filtering\n  edgeTypes?: EdgeType[];\n  excludeEdgeTypes?: EdgeType[];\n  minEdgeWeight?: number;\n  \n  // Node filtering\n  nodeTypes?: NodeType[];\n  excludeNodeTypes?: NodeType[];\n  \n  // Direction control\n  direction?: 'incoming' | 'outgoing' | 'both';\n  \n  // Termination conditions\n  maxNodes?: number;\n  stopAtNodeTypes?: NodeType[];\n  \n  // Algorithm options\n  algorithm?: 'bfs' | 'dfs' | 'dijkstra' | 'pagerank';\n  \n  // Result formatting\n  includeEdges?: boolean;\n  includeMetadata?: boolean;\n}\n\n// ============================================================================\n// Graph Statistics and Analytics\n// ============================================================================\n\n/**\n * Graph statistics and metrics\n */\nexport interface GraphStatistics {\n  // Size metrics\n  nodeCount: number;\n  edgeCount: number;\n  nodesByType: Record<NodeType, number>;\n  edgesByType: Record<EdgeType, number>;\n  \n  // Quality metrics\n  verifiedNodes: number;\n  averageConfidence: number;\n  \n  // Connectivity metrics\n  averageDegree: number;\n  maxDegree: number;\n  isolatedNodes: number;\n  connectedComponents: number;\n  \n  // Temporal metrics\n  oldestNode: Timestamp;\n  newestNode: Timestamp;\n  averageNodeAge: number;\n  \n  // Data source distribution\n  nodesBySource: Record<DataSource, number>;\n  edgesBySource: Record<DataSource, number>;\n}\n\n/**\n * Node importance metrics\n */\nexport interface NodeMetrics {\n  nodeId: NodeId;\n  \n  // Centrality measures\n  degree: number;\n  inDegree: number;\n  outDegree: number;\n  betweennessCentrality?: number;\n  closenessCentrality?: number;\n  eigenvectorCentrality?: number;\n  pageRank?: number;\n  \n  // Activity measures\n  recentVisits: number;\n  totalVisits: number;\n  lastVisited?: Timestamp;\n  \n  // Quality measures\n  confidence: ConfidenceLevel;\n  verified: boolean;\n  \n  // User engagement\n  timeSpent?: number;\n  interactionCount?: number;\n  bookmarked?: boolean;\n}\n\n// ============================================================================\n// Graph Operations Results\n// ============================================================================\n\n/**\n * Result of graph query operations\n */\nexport interface QueryResult<T> {\n  data: T[];\n  total: number;\n  hasMore: boolean;\n  cursor?: string;\n  executionTime: number;\n}\n\n/**\n * Result of graph traversal operations\n */\nexport interface TraversalResult {\n  nodes: StateNode[];\n  edges: StateEdge[];\n  paths?: Array<{\n    nodes: NodeId[];\n    edges: EdgeId[];\n    weight?: number;\n  }>;\n  statistics: {\n    nodesVisited: number;\n    edgesTraversed: number;\n    maxDepthReached: number;\n    executionTime: number;\n  };\n}\n\n/**\n * Result of subgraph extraction\n */\nexport interface SubgraphResult {\n  nodes: StateNode[];\n  edges: StateEdge[];\n  centerNode: NodeId;\n  radius: number;\n  statistics: GraphStatistics;\n}\n\n// ============================================================================\n// Graph Events and Updates\n// ============================================================================\n\n/**\n * Graph change events for real-time updates\n */\nexport enum GraphEventType {\n  NODE_CREATED = 'node_created',\n  NODE_UPDATED = 'node_updated',\n  NODE_DELETED = 'node_deleted',\n  EDGE_CREATED = 'edge_created',\n  EDGE_UPDATED = 'edge_updated',\n  EDGE_DELETED = 'edge_deleted',\n  GRAPH_CLEARED = 'graph_cleared',\n}\n\nexport interface GraphEvent {\n  type: GraphEventType;\n  timestamp: Timestamp;\n  nodeId?: NodeId;\n  edgeId?: EdgeId;\n  data?: any;\n  source: DataSource;\n  sessionId?: string;\n}\n\n/**\n * Batch operation for multiple graph changes\n */\nexport interface GraphBatch {\n  operations: Array<{\n    type: 'create_node' | 'update_node' | 'delete_node' | 'create_edge' | 'update_edge' | 'delete_edge';\n    data: any;\n  }>;\n  transactionId?: string;\n  source: DataSource;\n  timestamp: Timestamp;\n}\n\n// ============================================================================\n// Export types for easier imports\n// ============================================================================\n\n","/**\n * Magic Button Player V2 - Content SDK\n * \n * JavaScript SDK for websites to integrate with the Magic Button Player extension.\n * Allows pages to:\n * - Register data with the user state graph\n * - Subscribe to relevant tools and workflows\n * - Provide context for better automation\n * - Receive notifications and updates\n */\n\nimport { NodeType, EdgeType, DataSource, BaseNodeData, EdgeData } from '../graph/types';\n\nexport interface SDKConfig {\n  namespace?: string;\n  enableAutoCollection?: boolean;\n  enableUserTracking?: boolean;\n  apiKey?: string;\n  debug?: boolean;\n}\n\nexport interface SDKNode {\n  type: NodeType;\n  data: BaseNodeData;\n  id?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface SDKEdge {\n  fromNodeId: string;\n  toNodeId: string;\n  type: EdgeType;\n  data?: EdgeData;\n}\n\nexport interface SDKEvent {\n  type: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface ToolContext {\n  toolId: string;\n  permissions: string[];\n  data: any;\n}\n\n/**\n * Main SDK class for content pages\n */\nclass MagicButtonSDK {\n  private config: SDKConfig;\n  private isInitialized = false;\n  private isExtensionAvailable = false;\n  private messageQueue: any[] = [];\n  private eventHandlers = new Map<string, Function[]>();\n  private nodeRegistry = new Map<string, SDKNode>();\n  \n  constructor(config: SDKConfig = {}) {\n    this.config = {\n      namespace: 'magicbutton-sdk',\n      enableAutoCollection: true,\n      enableUserTracking: false,\n      debug: false,\n      ...config\n    };\n    \n    this.log('SDK created with config:', this.config);\n  }\n\n  /**\n   * Initialize the SDK and establish communication with extension\n   */\n  async initialize(): Promise<boolean> {\n    if (this.isInitialized) {\n      this.log('SDK already initialized');\n      return this.isExtensionAvailable;\n    }\n\n    this.log('Initializing SDK...');\n\n    try {\n      // Check if extension is available\n      this.isExtensionAvailable = await this.detectExtension();\n      \n      if (this.isExtensionAvailable) {\n        // Set up communication bridge\n        this.setupMessageBridge();\n        \n        // Register page with extension\n        await this.registerPage();\n        \n        // Enable auto-collection if configured\n        if (this.config.enableAutoCollection) {\n          this.enableAutoCollection();\n        }\n        \n        // Process queued messages\n        await this.processMessageQueue();\n        \n        this.log('SDK initialized successfully');\n      } else {\n        this.log('Extension not detected - SDK running in standalone mode');\n      }\n      \n      this.isInitialized = true;\n      this.emit('sdk:initialized', { available: this.isExtensionAvailable });\n      \n      return this.isExtensionAvailable;\n    } catch (error) {\n      this.error('Failed to initialize SDK:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Detect if Magic Button Player extension is available\n   */\n  private async detectExtension(): Promise<boolean> {\n    return new Promise((resolve) => {\n      // Send detection message\n      window.postMessage({\n        type: 'MAGICBUTTON_SDK_DETECTION',\n        timestamp: Date.now()\n      }, window.location.origin);\n      \n      // Listen for response\n      const listener = (event: MessageEvent) => {\n        if (event.source === window && \n            event.data.type === 'MAGICBUTTON_EXTENSION_RESPONSE') {\n          window.removeEventListener('message', listener);\n          resolve(true);\n        }\n      };\n      \n      window.addEventListener('message', listener);\n      \n      // Timeout after 1 second\n      setTimeout(() => {\n        window.removeEventListener('message', listener);\n        resolve(false);\n      }, 1000);\n    });\n  }\n\n  /**\n   * Set up message bridge with extension\n   */\n  private setupMessageBridge(): void {\n    window.addEventListener('message', (event) => {\n      if (event.source !== window) return;\n      \n      if (event.data.type === 'MAGICBUTTON_SDK_RESPONSE') {\n        this.handleExtensionMessage(event.data);\n      }\n    });\n  }\n\n  /**\n   * Register current page with extension\n   */\n  private async registerPage(): Promise<void> {\n    const pageData = this.collectPageData();\n    \n    await this.sendMessage({\n      type: 'REGISTER_PAGE',\n      data: {\n        ...pageData,\n        sdkVersion: '2.0.0',\n        config: this.config\n      }\n    });\n  }\n\n  /**\n   * Collect basic page data\n   */\n  private collectPageData(): any {\n    return {\n      url: window.location.href,\n      title: document.title,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      referrer: document.referrer,\n      // OpenGraph data\n      openGraph: this.extractOpenGraphData(),\n      // Schema.org data\n      structuredData: this.extractStructuredData()\n    };\n  }\n\n  /**\n   * Extract OpenGraph metadata\n   */\n  private extractOpenGraphData(): Record<string, string> {\n    const ogData: Record<string, string> = {};\n    const ogTags = document.querySelectorAll('meta[property^=\"og:\"]');\n    \n    ogTags.forEach(tag => {\n      const property = tag.getAttribute('property')?.replace('og:', '');\n      const content = tag.getAttribute('content');\n      if (property && content) {\n        ogData[property] = content;\n      }\n    });\n    \n    return ogData;\n  }\n\n  /**\n   * Extract structured data (JSON-LD)\n   */\n  private extractStructuredData(): any[] {\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    const structuredData: any[] = [];\n    \n    scripts.forEach(script => {\n      try {\n        const data = JSON.parse(script.textContent || '');\n        structuredData.push(data);\n      } catch (error) {\n        this.log('Failed to parse structured data:', error);\n      }\n    });\n    \n    return structuredData;\n  }\n\n  // ============================================================================\n  // Public API Methods\n  // ============================================================================\n\n  /**\n   * Add a node to the user state graph\n   */\n  async addNode(node: SDKNode): Promise<string> {\n    const nodeId = node.id || this.generateNodeId();\n    \n    // Store in local registry\n    this.nodeRegistry.set(nodeId, { ...node, id: nodeId });\n    \n    // Send to extension if available\n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'ADD_NODE',\n        data: {\n          id: nodeId,\n          ...node,\n          source: DataSource.SDK,\n          timestamp: Date.now()\n        }\n      });\n    }\n    \n    this.emit('node:added', { nodeId, node });\n    return nodeId;\n  }\n\n  /**\n   * Add an edge between nodes\n   */\n  async addEdge(edge: SDKEdge): Promise<string> {\n    const edgeId = this.generateEdgeId();\n    \n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'ADD_EDGE',\n        data: {\n          id: edgeId,\n          ...edge,\n          source: DataSource.SDK,\n          timestamp: Date.now()\n        }\n      });\n    }\n    \n    this.emit('edge:added', { edgeId, edge });\n    return edgeId;\n  }\n\n  /**\n   * Track user action/event\n   */\n  async trackAction(actionType: string, data: any): Promise<void> {\n    const actionData = {\n      type: actionType,\n      data,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent\n    };\n    \n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'TRACK_ACTION',\n        data: actionData\n      });\n    }\n    \n    this.emit('action:tracked', actionData);\n  }\n\n  /**\n   * Register for tool notifications\n   */\n  async registerForTools(toolTypes: string[]): Promise<void> {\n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'REGISTER_TOOLS',\n        data: { toolTypes }\n      });\n    }\n    \n    this.emit('tools:registered', { toolTypes });\n  }\n\n  /**\n   * Request user consent for data collection\n   */\n  async requestConsent(dataTypes: string[], purpose: string): Promise<boolean> {\n    if (!this.isExtensionAvailable) {\n      return false;\n    }\n    \n    const response = await this.sendMessage({\n      type: 'REQUEST_CONSENT',\n      data: { dataTypes, purpose }\n    });\n    \n    const granted = response?.granted || false;\n    this.emit('consent:response', { granted, dataTypes, purpose });\n    \n    return granted;\n  }\n\n  /**\n   * Get current user context from extension\n   */\n  async getUserContext(): Promise<any> {\n    if (!this.isExtensionAvailable) {\n      return null;\n    }\n    \n    const response = await this.sendMessage({\n      type: 'GET_USER_CONTEXT'\n    });\n    \n    return response?.context || null;\n  }\n\n  /**\n   * Subscribe to tool activation events\n   */\n  onToolActivated(callback: (tool: ToolContext) => void): void {\n    this.on('tool:activated', callback);\n  }\n\n  /**\n   * Subscribe to graph updates\n   */\n  onGraphUpdated(callback: (update: any) => void): void {\n    this.on('graph:updated', callback);\n  }\n\n  // ============================================================================\n  // Auto-collection Features\n  // ============================================================================\n\n  /**\n   * Enable automatic data collection\n   */\n  private enableAutoCollection(): void {\n    // Track page navigation\n    this.trackPageNavigation();\n    \n    // Track user interactions\n    if (this.config.enableUserTracking) {\n      this.trackUserInteractions();\n    }\n    \n    // Track form submissions\n    this.trackFormSubmissions();\n    \n    // Monitor DOM changes\n    this.monitorDOMChanges();\n  }\n\n  /**\n   * Track page navigation events\n   */\n  private trackPageNavigation(): void {\n    // Track initial page load\n    this.trackAction('page_loaded', this.collectPageData());\n    \n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.trackAction('page_unloaded', {\n        url: window.location.href,\n        timeOnPage: Date.now() - (window as any).__magicButtonPageLoadTime\n      });\n    });\n    \n    // Track history changes (SPA navigation)\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    \n    history.pushState = (...args) => {\n      originalPushState.apply(history, args);\n      this.trackAction('navigation', { \n        type: 'pushState', \n        url: window.location.href \n      });\n    };\n    \n    history.replaceState = (...args) => {\n      originalReplaceState.apply(history, args);\n      this.trackAction('navigation', { \n        type: 'replaceState', \n        url: window.location.href \n      });\n    };\n    \n    window.addEventListener('popstate', () => {\n      this.trackAction('navigation', { \n        type: 'popstate', \n        url: window.location.href \n      });\n    });\n  }\n\n  /**\n   * Track user interactions\n   */\n  private trackUserInteractions(): void {\n    // Track clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as Element;\n      this.trackAction('click', {\n        tagName: target.tagName,\n        className: target.className,\n        id: target.id,\n        href: target.getAttribute('href'),\n        x: event.clientX,\n        y: event.clientY\n      });\n    });\n    \n    // Track scroll\n    let scrollTimeout: number;\n    window.addEventListener('scroll', () => {\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        this.trackAction('scroll', {\n          scrollY: window.scrollY,\n          scrollX: window.scrollX,\n          documentHeight: document.documentElement.scrollHeight,\n          viewportHeight: window.innerHeight\n        });\n      }, 500);\n    });\n  }\n\n  /**\n   * Track form submissions\n   */\n  private trackFormSubmissions(): void {\n    document.addEventListener('submit', (event) => {\n      const form = event.target as HTMLFormElement;\n      const formData = new FormData(form);\n      const data: Record<string, any> = {};\n      \n      // Only collect non-sensitive data\n      for (const [key, value] of formData.entries()) {\n        if (!this.isSensitiveField(key)) {\n          data[key] = value;\n        }\n      }\n      \n      this.trackAction('form_submitted', {\n        action: form.action,\n        method: form.method,\n        fieldCount: formData.size,\n        hasFileUpload: Array.from(form.elements).some(el => \n          el instanceof HTMLInputElement && el.type === 'file'\n        )\n      });\n    });\n  }\n\n  /**\n   * Monitor DOM changes for dynamic content\n   */\n  private monitorDOMChanges(): void {\n    const observer = new MutationObserver((mutations) => {\n      let hasSignificantChanges = false;\n      \n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          hasSignificantChanges = true;\n        }\n      });\n      \n      if (hasSignificantChanges) {\n        this.trackAction('dom_updated', {\n          mutationCount: mutations.length,\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Check if a field name indicates sensitive data\n   */\n  private isSensitiveField(fieldName: string): boolean {\n    const sensitivePatterns = [\n      /password/i,\n      /ssn|social/i,\n      /credit|card/i,\n      /cvv|cvc/i,\n      /bank/i,\n      /secret/i,\n      /token/i,\n      /api[_-]?key/i\n    ];\n    \n    return sensitivePatterns.some(pattern => pattern.test(fieldName));\n  }\n\n  // ============================================================================\n  // Utility Methods\n  // ============================================================================\n\n  /**\n   * Send message to extension\n   */\n  private async sendMessage(message: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!this.isExtensionAvailable) {\n        this.messageQueue.push(message);\n        resolve(null);\n        return;\n      }\n      \n      const messageId = this.generateMessageId();\n      const timeout = setTimeout(() => {\n        reject(new Error('Message timeout'));\n      }, 5000);\n      \n      const listener = (event: MessageEvent) => {\n        if (event.source === window && \n            event.data.type === 'MAGICBUTTON_SDK_RESPONSE' &&\n            event.data.messageId === messageId) {\n          clearTimeout(timeout);\n          window.removeEventListener('message', listener);\n          resolve(event.data.response);\n        }\n      };\n      \n      window.addEventListener('message', listener);\n      \n      window.postMessage({\n        type: 'MAGICBUTTON_SDK_MESSAGE',\n        messageId,\n        payload: message\n      }, window.location.origin);\n    });\n  }\n\n  /**\n   * Process queued messages\n   */\n  private async processMessageQueue(): Promise<void> {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      try {\n        await this.sendMessage(message);\n      } catch (error) {\n        this.error('Failed to send queued message:', error);\n      }\n    }\n  }\n\n  /**\n   * Handle messages from extension\n   */\n  private handleExtensionMessage(data: any): void {\n    switch (data.type) {\n      case 'TOOL_ACTIVATED':\n        this.emit('tool:activated', data.tool);\n        break;\n      case 'GRAPH_UPDATED':\n        this.emit('graph:updated', data.update);\n        break;\n      case 'CONSENT_REQUEST':\n        this.handleConsentRequest(data);\n        break;\n      default:\n        this.log('Unknown message from extension:', data);\n    }\n  }\n\n  /**\n   * Handle consent request from extension\n   */\n  private handleConsentRequest(data: any): void {\n    // This could show a custom consent UI\n    const granted = confirm(`Allow Magic Button Player to access ${data.dataTypes.join(', ')} for ${data.purpose}?`);\n    \n    window.postMessage({\n      type: 'MAGICBUTTON_SDK_CONSENT_RESPONSE',\n      requestId: data.requestId,\n      granted\n    }, window.location.origin);\n  }\n\n  // ============================================================================\n  // Event System\n  // ============================================================================\n\n  /**\n   * Subscribe to SDK events\n   */\n  on(eventType: string, handler: Function): void {\n    if (!this.eventHandlers.has(eventType)) {\n      this.eventHandlers.set(eventType, []);\n    }\n    this.eventHandlers.get(eventType)!.push(handler);\n  }\n\n  /**\n   * Unsubscribe from SDK events\n   */\n  off(eventType: string, handler?: Function): void {\n    if (!this.eventHandlers.has(eventType)) return;\n    \n    if (handler) {\n      const handlers = this.eventHandlers.get(eventType)!;\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    } else {\n      this.eventHandlers.delete(eventType);\n    }\n  }\n\n  /**\n   * Emit SDK event\n   */\n  private emit(eventType: string, data?: any): void {\n    const handlers = this.eventHandlers.get(eventType) || [];\n    handlers.forEach(handler => {\n      try {\n        handler(data);\n      } catch (error) {\n        this.error('Event handler error:', error);\n      }\n    });\n  }\n\n  // ============================================================================\n  // ID Generation\n  // ============================================================================\n\n  private generateNodeId(): string {\n    return `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateEdgeId(): string {\n    return `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // ============================================================================\n  // Logging\n  // ============================================================================\n\n  private log(...args: any[]): void {\n    if (this.config.debug) {\n      console.log('[MagicButton SDK]', ...args);\n    }\n  }\n\n  private error(...args: any[]): void {\n    console.error('[MagicButton SDK]', ...args);\n  }\n}\n\n// ============================================================================\n// Global SDK Instance\n// ============================================================================\n\ndeclare global {\n  interface Window {\n    MagicButton?: MagicButtonSDK;\n    __MagicButtonSDK?: MagicButtonSDK;\n  }\n}\n\n/**\n * Auto-initialize SDK if window.MagicButtonConfig is present\n */\nif (typeof window !== 'undefined') {\n  // Mark page load time for tracking\n  (window as any).__magicButtonPageLoadTime = Date.now();\n  \n  // Check for global config\n  const globalConfig = (window as any).MagicButtonConfig;\n  if (globalConfig || (window as any).MagicButtonAutoInit) {\n    const sdk = new MagicButtonSDK(globalConfig);\n    window.MagicButton = sdk;\n    window.__MagicButtonSDK = sdk;\n    \n    // Auto-initialize\n    sdk.initialize().then(success => {\n      if (success) {\n        console.log('[MagicButton] SDK initialized successfully');\n      }\n    });\n  }\n}\n\nexport default MagicButtonSDK;\nexport { MagicButtonSDK };"],"names":["DataSource","MagicButtonSDK","constructor","config","__publicField","this","Map","__spreadValues","namespace","enableAutoCollection","enableUserTracking","debug","log","initialize","__async","isInitialized","isExtensionAvailable","detectExtension","setupMessageBridge","registerPage","processMessageQueue","emit","available","error","Promise","resolve","window","postMessage","type","timestamp","Date","now","location","origin","listener","event","source","data","removeEventListener","addEventListener","setTimeout","handleExtensionMessage","pageData","collectPageData","sendMessage","__spreadProps","sdkVersion","url","href","title","document","userAgent","navigator","referrer","openGraph","extractOpenGraphData","structuredData","extractStructuredData","ogData","querySelectorAll","forEach","tag","_a","property","getAttribute","replace","content","scripts","script","JSON","parse","textContent","push","addNode","node","nodeId","id","generateNodeId","nodeRegistry","set","SDK","addEdge","edge","edgeId","generateEdgeId","trackAction","actionType","actionData","registerForTools","toolTypes","requestConsent","dataTypes","purpose","response","granted","getUserContext","context","onToolActivated","callback","on","onGraphUpdated","trackPageNavigation","trackUserInteractions","trackFormSubmissions","monitorDOMChanges","timeOnPage","__magicButtonPageLoadTime","originalPushState","history","pushState","originalReplaceState","replaceState","args","apply","scrollTimeout","target","tagName","className","x","clientX","y","clientY","clearTimeout","scrollY","scrollX","documentHeight","documentElement","scrollHeight","viewportHeight","innerHeight","form","formData","FormData","key","value","entries","isSensitiveField","action","method","fieldCount","size","hasFileUpload","Array","from","elements","some","el","HTMLInputElement","MutationObserver","mutations","hasSignificantChanges","mutation","addedNodes","length","mutationCount","observe","body","childList","subtree","fieldName","pattern","test","message","reject","messageQueue","messageId","generateMessageId","timeout","Error","payload","shift","tool","update","handleConsentRequest","confirm","join","requestId","eventType","handler","eventHandlers","has","get","off","handlers","index","indexOf","splice","delete","Math","random","toString","substr","console","globalConfig","MagicButtonConfig","MagicButtonAutoInit","sdk","MagicButton","__MagicButtonSDK","then","success"],"mappings":"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"}