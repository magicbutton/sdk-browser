{"version":3,"file":"magicbutton-sdk.mjs","sources":["../src/lib/graph/types.ts","../src/lib/sdk/content-sdk.ts"],"sourcesContent":["/**\n * User State Graph Types\n * \n * Core type definitions for the graph-based user state management system.\n * Every user interaction, page visit, and data point becomes a node in this graph.\n */\n\n// ============================================================================\n// Core Graph Types\n// ============================================================================\n\n/**\n * Unique identifier for graph nodes and edges\n */\nexport type NodeId = string;\nexport type EdgeId = string;\n\n/**\n * Timestamp in milliseconds since epoch\n */\nexport type Timestamp = number;\n\n/**\n * Node types represent different kinds of entities in the user's browsing experience\n */\nexport enum NodeType {\n  // Web browsing\n  PAGE = 'page',                    // Web page visit\n  DOMAIN = 'domain',                // Website domain\n  URL_PATTERN = 'url_pattern',      // URL pattern or route\n  \n  // Content and data\n  CONTENT = 'content',              // Page content or text snippet\n  IMAGE = 'image',                  // Image or media\n  LINK = 'link',                    // Hyperlink\n  FORM = 'form',                    // Form interaction\n  \n  // User actions\n  ACTION = 'action',                // User action (click, scroll, etc.)\n  SEARCH = 'search',                // Search query\n  INPUT = 'input',                  // User input or data entry\n  \n  // Entities and objects\n  PERSON = 'person',                // Person or user\n  ORGANIZATION = 'organization',     // Company or organization\n  PRODUCT = 'product',              // Product or service\n  DOCUMENT = 'document',            // Document or file\n  \n  // Tools and applications\n  TOOL = 'tool',                    // External tool or application\n  WORKFLOW = 'workflow',            // Workflow or process\n  PLAYBOOK = 'playbook',            // Automation playbook\n  \n  // Meta and system\n  SESSION = 'session',              // Browsing session\n  CONTEXT = 'context',              // Context or situation\n  INTENT = 'intent',                // User intent or goal\n  TAG = 'tag',                      // Classification tag\n  NOTE = 'note',                    // User annotation or note\n}\n\n/**\n * Edge types represent relationships between nodes\n */\nexport enum EdgeType {\n  // Navigation relationships\n  NAVIGATED_TO = 'navigated_to',        // User navigated from A to B\n  CONTAINS = 'contains',                // A contains B (page contains link)\n  REFERENCES = 'references',            // A references B (page references person)\n  \n  // Temporal relationships\n  FOLLOWED_BY = 'followed_by',          // A was followed by B in time\n  TRIGGERED_BY = 'triggered_by',        // A was triggered by B\n  \n  // Semantic relationships\n  RELATED_TO = 'related_to',            // A is related to B\n  SIMILAR_TO = 'similar_to',            // A is similar to B\n  PART_OF = 'part_of',                  // A is part of B\n  INSTANCE_OF = 'instance_of',          // A is an instance of B\n  \n  // Action relationships\n  PERFORMED_ON = 'performed_on',        // Action performed on target\n  USED_WITH = 'used_with',              // Tool used with content\n  CREATED = 'created',                  // A created B\n  MODIFIED = 'modified',                // A modified B\n  \n  // User intent relationships\n  INTERESTED_IN = 'interested_in',      // User interested in topic\n  WORKING_ON = 'working_on',            // User working on project\n  SEARCHING_FOR = 'searching_for',      // User searching for information\n  \n  // Tool and workflow relationships\n  AUTOMATED_BY = 'automated_by',        // A is automated by tool B\n  ENHANCED_BY = 'enhanced_by',          // A is enhanced by tool B\n  DEPENDS_ON = 'depends_on',            // A depends on B\n}\n\n/**\n * Data source indicates how the node/edge was created\n */\nexport enum DataSource {\n  SCRAPING = 'scraping',           // Automatically scraped from page\n  SDK = 'sdk',                     // Provided by page SDK\n  USER_INPUT = 'user_input',       // Explicitly entered by user\n  TOOL_UPDATE = 'tool_update',     // Updated by external tool\n  INFERENCE = 'inference',         // Inferred from other data\n  IMPORT = 'import',               // Imported from external source\n  API = 'api',                     // Retrieved from API\n}\n\n/**\n * Confidence level for inferred or uncertain data\n */\nexport enum ConfidenceLevel {\n  CERTAIN = 1.0,      // Explicitly confirmed\n  HIGH = 0.8,         // Very likely correct\n  MEDIUM = 0.6,       // Probably correct\n  LOW = 0.4,          // Possibly correct\n  UNCERTAIN = 0.2,    // Unlikely but possible\n}\n\n// ============================================================================\n// Node Definition\n// ============================================================================\n\n/**\n * Core properties common to all nodes\n */\nexport interface BaseNodeData {\n  // Identity\n  title?: string;                   // Human-readable title\n  description?: string;             // Longer description\n  url?: string;                     // Associated URL (if applicable)\n  \n  // Content\n  content?: string;                 // Text content or data\n  metadata?: Record<string, any>;   // Flexible metadata storage\n  \n  // Classification\n  tags?: string[];                  // User-defined tags\n  categories?: string[];            // System categories\n  \n  // Quality and trust\n  confidence?: ConfidenceLevel;     // Confidence in data accuracy\n  verified?: boolean;               // Whether data has been verified\n  \n  // External references\n  externalId?: string;              // ID in external system\n  externalSource?: string;          // Name of external source\n}\n\n/**\n * Node-type specific data interfaces\n */\nexport interface PageNodeData extends BaseNodeData {\n  url: string;                      // Required for pages\n  title?: string;                   // Page title\n  favicon?: string;                 // Favicon URL\n  openGraph?: Record<string, string>; // OpenGraph metadata\n  scrollDepth?: number;             // How far user scrolled\n  timeOnPage?: number;              // Time spent on page (ms)\n  interactionCount?: number;        // Number of interactions\n}\n\nexport interface PersonNodeData extends BaseNodeData {\n  name?: string;                    // Person's name\n  email?: string;                   // Email address\n  role?: string;                    // Job title or role\n  organization?: string;            // Company or org\n  avatar?: string;                  // Profile image URL\n  socialProfiles?: Record<string, string>; // Social media profiles\n}\n\nexport interface ProductNodeData extends BaseNodeData {\n  name: string;                     // Product name\n  price?: number;                   // Price in base currency\n  currency?: string;                // Currency code\n  brand?: string;                   // Brand name\n  category?: string;                // Product category\n  rating?: number;                  // User rating\n  availability?: string;            // Availability status\n  images?: string[];                // Product images\n}\n\nexport interface ActionNodeData extends BaseNodeData {\n  actionType: string;               // Type of action (click, scroll, etc.)\n  target?: string;                  // What was acted upon\n  value?: any;                      // Action value or data\n  duration?: number;                // How long action took\n  coordinates?: { x: number; y: number }; // Screen coordinates\n}\n\n/**\n * Complete node definition\n */\nexport interface StateNode {\n  // Core identity\n  id: NodeId;\n  type: NodeType;\n  data: BaseNodeData;\n  \n  // Provenance\n  source: DataSource;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  createdBy?: string;               // User or system that created node\n  \n  // Context\n  sessionId?: string;               // Browser session ID\n  tabId?: number;                   // Chrome tab ID\n  windowId?: number;                // Chrome window ID\n  \n  // Relationships (for optimization)\n  inDegree?: number;                // Number of incoming edges\n  outDegree?: number;               // Number of outgoing edges\n  \n  // Lifecycle\n  version?: number;                 // Version for conflict resolution\n  deleted?: boolean;                // Soft delete flag\n  deletedAt?: Timestamp;            // When node was deleted\n}\n\n// ============================================================================\n// Edge Definition\n// ============================================================================\n\n/**\n * Edge properties and metadata\n */\nexport interface EdgeData {\n  // Core properties\n  weight?: number;                  // Edge strength/importance (0-1)\n  confidence?: ConfidenceLevel;     // Confidence in relationship\n  \n  // Metadata\n  metadata?: Record<string, any>;   // Flexible metadata\n  labels?: string[];                // Edge labels or annotations\n  \n  // Context\n  context?: string;                 // Context where relationship was observed\n  evidence?: string[];              // Evidence supporting the relationship\n  \n  // Temporal\n  startTime?: Timestamp;            // When relationship started\n  endTime?: Timestamp;              // When relationship ended (if applicable)\n  duration?: number;                // Duration of relationship\n  \n  // Quality\n  verified?: boolean;               // Whether relationship is verified\n  strength?: number;                // Relationship strength (0-1)\n}\n\n/**\n * Complete edge definition\n */\nexport interface StateEdge {\n  // Core identity\n  id: EdgeId;\n  type: EdgeType;\n  \n  // Connection\n  fromNodeId: NodeId;\n  toNodeId: NodeId;\n  \n  // Properties\n  data: EdgeData;\n  \n  // Provenance\n  source: DataSource;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  createdBy?: string;\n  \n  // Context\n  sessionId?: string;\n  tabId?: number;\n  \n  // Lifecycle\n  version?: number;\n  deleted?: boolean;\n  deletedAt?: Timestamp;\n}\n\n// ============================================================================\n// Graph Query Types\n// ============================================================================\n\n/**\n * Query criteria for finding nodes\n */\nexport interface NodeQuery {\n  // Identity filters\n  ids?: NodeId[];\n  types?: NodeType[];\n  \n  // Data filters\n  titleContains?: string;\n  urlMatches?: string | RegExp;\n  hasTag?: string;\n  hasCategory?: string;\n  \n  // Provenance filters\n  sources?: DataSource[];\n  createdAfter?: Timestamp;\n  createdBefore?: Timestamp;\n  createdBy?: string;\n  \n  // Context filters\n  sessionId?: string;\n  tabId?: number;\n  \n  // Quality filters\n  minConfidence?: ConfidenceLevel;\n  verified?: boolean;\n  \n  // Relationship filters\n  connectedTo?: NodeId;\n  hasIncomingEdge?: EdgeType;\n  hasOutgoingEdge?: EdgeType;\n  \n  // Pagination\n  limit?: number;\n  offset?: number;\n  \n  // Sorting\n  sortBy?: 'createdAt' | 'updatedAt' | 'title' | 'relevance';\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * Query criteria for finding edges\n */\nexport interface EdgeQuery {\n  // Identity filters\n  ids?: EdgeId[];\n  types?: EdgeType[];\n  \n  // Connection filters\n  fromNodeId?: NodeId;\n  toNodeId?: NodeId;\n  fromNodeTypes?: NodeType[];\n  toNodeTypes?: NodeType[];\n  \n  // Data filters\n  minWeight?: number;\n  maxWeight?: number;\n  minConfidence?: ConfidenceLevel;\n  \n  // Provenance filters\n  sources?: DataSource[];\n  createdAfter?: Timestamp;\n  createdBefore?: Timestamp;\n  \n  // Context filters\n  sessionId?: string;\n  tabId?: number;\n  \n  // Pagination\n  limit?: number;\n  offset?: number;\n  \n  // Sorting\n  sortBy?: 'createdAt' | 'weight' | 'confidence';\n  sortOrder?: 'asc' | 'desc';\n}\n\n/**\n * Traversal options for graph exploration\n */\nexport interface TraversalOptions {\n  // Depth control\n  maxDepth?: number;\n  minDepth?: number;\n  \n  // Edge filtering\n  edgeTypes?: EdgeType[];\n  excludeEdgeTypes?: EdgeType[];\n  minEdgeWeight?: number;\n  \n  // Node filtering\n  nodeTypes?: NodeType[];\n  excludeNodeTypes?: NodeType[];\n  \n  // Direction control\n  direction?: 'incoming' | 'outgoing' | 'both';\n  \n  // Termination conditions\n  maxNodes?: number;\n  stopAtNodeTypes?: NodeType[];\n  \n  // Algorithm options\n  algorithm?: 'bfs' | 'dfs' | 'dijkstra' | 'pagerank';\n  \n  // Result formatting\n  includeEdges?: boolean;\n  includeMetadata?: boolean;\n}\n\n// ============================================================================\n// Graph Statistics and Analytics\n// ============================================================================\n\n/**\n * Graph statistics and metrics\n */\nexport interface GraphStatistics {\n  // Size metrics\n  nodeCount: number;\n  edgeCount: number;\n  nodesByType: Record<NodeType, number>;\n  edgesByType: Record<EdgeType, number>;\n  \n  // Quality metrics\n  verifiedNodes: number;\n  averageConfidence: number;\n  \n  // Connectivity metrics\n  averageDegree: number;\n  maxDegree: number;\n  isolatedNodes: number;\n  connectedComponents: number;\n  \n  // Temporal metrics\n  oldestNode: Timestamp;\n  newestNode: Timestamp;\n  averageNodeAge: number;\n  \n  // Data source distribution\n  nodesBySource: Record<DataSource, number>;\n  edgesBySource: Record<DataSource, number>;\n}\n\n/**\n * Node importance metrics\n */\nexport interface NodeMetrics {\n  nodeId: NodeId;\n  \n  // Centrality measures\n  degree: number;\n  inDegree: number;\n  outDegree: number;\n  betweennessCentrality?: number;\n  closenessCentrality?: number;\n  eigenvectorCentrality?: number;\n  pageRank?: number;\n  \n  // Activity measures\n  recentVisits: number;\n  totalVisits: number;\n  lastVisited?: Timestamp;\n  \n  // Quality measures\n  confidence: ConfidenceLevel;\n  verified: boolean;\n  \n  // User engagement\n  timeSpent?: number;\n  interactionCount?: number;\n  bookmarked?: boolean;\n}\n\n// ============================================================================\n// Graph Operations Results\n// ============================================================================\n\n/**\n * Result of graph query operations\n */\nexport interface QueryResult<T> {\n  data: T[];\n  total: number;\n  hasMore: boolean;\n  cursor?: string;\n  executionTime: number;\n}\n\n/**\n * Result of graph traversal operations\n */\nexport interface TraversalResult {\n  nodes: StateNode[];\n  edges: StateEdge[];\n  paths?: Array<{\n    nodes: NodeId[];\n    edges: EdgeId[];\n    weight?: number;\n  }>;\n  statistics: {\n    nodesVisited: number;\n    edgesTraversed: number;\n    maxDepthReached: number;\n    executionTime: number;\n  };\n}\n\n/**\n * Result of subgraph extraction\n */\nexport interface SubgraphResult {\n  nodes: StateNode[];\n  edges: StateEdge[];\n  centerNode: NodeId;\n  radius: number;\n  statistics: GraphStatistics;\n}\n\n// ============================================================================\n// Graph Events and Updates\n// ============================================================================\n\n/**\n * Graph change events for real-time updates\n */\nexport enum GraphEventType {\n  NODE_CREATED = 'node_created',\n  NODE_UPDATED = 'node_updated',\n  NODE_DELETED = 'node_deleted',\n  EDGE_CREATED = 'edge_created',\n  EDGE_UPDATED = 'edge_updated',\n  EDGE_DELETED = 'edge_deleted',\n  GRAPH_CLEARED = 'graph_cleared',\n}\n\nexport interface GraphEvent {\n  type: GraphEventType;\n  timestamp: Timestamp;\n  nodeId?: NodeId;\n  edgeId?: EdgeId;\n  data?: any;\n  source: DataSource;\n  sessionId?: string;\n}\n\n/**\n * Batch operation for multiple graph changes\n */\nexport interface GraphBatch {\n  operations: Array<{\n    type: 'create_node' | 'update_node' | 'delete_node' | 'create_edge' | 'update_edge' | 'delete_edge';\n    data: any;\n  }>;\n  transactionId?: string;\n  source: DataSource;\n  timestamp: Timestamp;\n}\n\n// ============================================================================\n// Export types for easier imports\n// ============================================================================\n\n","/**\n * Magic Button Player V2 - Content SDK\n * \n * JavaScript SDK for websites to integrate with the Magic Button Player extension.\n * Allows pages to:\n * - Register data with the user state graph\n * - Subscribe to relevant tools and workflows\n * - Provide context for better automation\n * - Receive notifications and updates\n */\n\nimport { NodeType, EdgeType, DataSource, BaseNodeData, EdgeData } from '../graph/types';\n\nexport interface SDKConfig {\n  namespace?: string;\n  enableAutoCollection?: boolean;\n  enableUserTracking?: boolean;\n  apiKey?: string;\n  debug?: boolean;\n}\n\nexport interface SDKNode {\n  type: NodeType;\n  data: BaseNodeData;\n  id?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface SDKEdge {\n  fromNodeId: string;\n  toNodeId: string;\n  type: EdgeType;\n  data?: EdgeData;\n}\n\nexport interface SDKEvent {\n  type: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface ToolContext {\n  toolId: string;\n  permissions: string[];\n  data: any;\n}\n\nexport interface HandshakeRequest {\n  siteName: string;\n  siteUrl: string;\n  permissions: string[];\n  purpose: string;\n}\n\nexport interface HandshakeResponse {\n  success: boolean;\n  sessionId?: string;\n  code?: string;\n  expiresAt?: number;\n}\n\n/**\n * Main SDK class for content pages\n */\nclass MagicButtonSDK {\n  private config: SDKConfig;\n  private isInitialized = false;\n  private isExtensionAvailable = false;\n  private messageQueue: any[] = [];\n  private eventHandlers = new Map<string, Function[]>();\n  private nodeRegistry = new Map<string, SDKNode>();\n  private handshakeSessionId: string | null = null;\n  private handshakeInProgress = false;\n  private accessToken: string | null = null;\n  private tokenExpiresAt: number | null = null;\n  \n  constructor(config: SDKConfig = {}) {\n    this.config = {\n      namespace: 'magicbutton-sdk',\n      enableAutoCollection: true,\n      enableUserTracking: false,\n      debug: false,\n      ...config\n    };\n    \n    this.log('SDK created with config:', this.config);\n  }\n\n  /**\n   * Initialize the SDK and establish communication with extension\n   */\n  async initialize(): Promise<boolean> {\n    if (this.isInitialized) {\n      this.log('SDK already initialized');\n      return this.isExtensionAvailable;\n    }\n\n    this.log('Initializing SDK...');\n\n    try {\n      // Check if extension is available\n      this.isExtensionAvailable = await this.detectExtension();\n      \n      if (this.isExtensionAvailable) {\n        // Set up communication bridge\n        this.setupMessageBridge();\n        \n        // Register page with extension\n        await this.registerPage();\n        \n        // Enable auto-collection if configured\n        if (this.config.enableAutoCollection) {\n          this.enableAutoCollection();\n        }\n        \n        // Process queued messages\n        await this.processMessageQueue();\n        \n        this.log('SDK initialized successfully');\n      } else {\n        this.log('Extension not detected - SDK running in standalone mode');\n      }\n      \n      this.isInitialized = true;\n      this.emit('sdk:initialized', { available: this.isExtensionAvailable });\n      \n      return this.isExtensionAvailable;\n    } catch (error) {\n      this.error('Failed to initialize SDK:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Detect if Magic Button Player extension is available\n   */\n  private async detectExtension(): Promise<boolean> {\n    return new Promise((resolve) => {\n      // Send detection message\n      window.postMessage({\n        type: 'MAGICBUTTON_SDK_DETECTION',\n        timestamp: Date.now()\n      }, window.location.origin);\n      \n      // Listen for response\n      const listener = (event: MessageEvent) => {\n        if (event.source === window && \n            event.data.type === 'MAGICBUTTON_EXTENSION_RESPONSE') {\n          window.removeEventListener('message', listener);\n          resolve(true);\n        }\n      };\n      \n      window.addEventListener('message', listener);\n      \n      // Timeout after 1 second\n      setTimeout(() => {\n        window.removeEventListener('message', listener);\n        resolve(false);\n      }, 1000);\n    });\n  }\n\n  /**\n   * Set up message bridge with extension\n   */\n  private setupMessageBridge(): void {\n    window.addEventListener('message', (event) => {\n      if (event.source !== window) return;\n      \n      if (event.data.type === 'MAGICBUTTON_SDK_RESPONSE') {\n        this.handleExtensionMessage(event.data);\n      }\n    });\n  }\n\n  /**\n   * Register current page with extension\n   */\n  private async registerPage(): Promise<void> {\n    const pageData = this.collectPageData();\n    \n    await this.sendMessage({\n      type: 'REGISTER_PAGE',\n      data: {\n        ...pageData,\n        sdkVersion: '2.0.0',\n        config: this.config\n      }\n    });\n  }\n\n  /**\n   * Collect basic page data\n   */\n  private collectPageData(): any {\n    return {\n      url: window.location.href,\n      title: document.title,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      referrer: document.referrer,\n      // OpenGraph data\n      openGraph: this.extractOpenGraphData(),\n      // Schema.org data\n      structuredData: this.extractStructuredData()\n    };\n  }\n\n  /**\n   * Extract OpenGraph metadata\n   */\n  private extractOpenGraphData(): Record<string, string> {\n    const ogData: Record<string, string> = {};\n    const ogTags = document.querySelectorAll('meta[property^=\"og:\"]');\n    \n    ogTags.forEach(tag => {\n      const property = tag.getAttribute('property')?.replace('og:', '');\n      const content = tag.getAttribute('content');\n      if (property && content) {\n        ogData[property] = content;\n      }\n    });\n    \n    return ogData;\n  }\n\n  /**\n   * Extract structured data (JSON-LD)\n   */\n  private extractStructuredData(): any[] {\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n    const structuredData: any[] = [];\n    \n    scripts.forEach(script => {\n      try {\n        const data = JSON.parse(script.textContent || '');\n        structuredData.push(data);\n      } catch (error) {\n        this.log('Failed to parse structured data:', error);\n      }\n    });\n    \n    return structuredData;\n  }\n\n  // ============================================================================\n  // Public API Methods\n  // ============================================================================\n\n  /**\n   * Add a node to the user state graph\n   */\n  async addNode(node: SDKNode): Promise<string> {\n    const nodeId = node.id || this.generateNodeId();\n    \n    // Store in local registry\n    this.nodeRegistry.set(nodeId, { ...node, id: nodeId });\n    \n    // Send to extension if available\n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'ADD_NODE',\n        data: {\n          id: nodeId,\n          ...node,\n          source: DataSource.SDK,\n          timestamp: Date.now()\n        }\n      });\n    }\n    \n    this.emit('node:added', { nodeId, node });\n    return nodeId;\n  }\n\n  /**\n   * Add an edge between nodes\n   */\n  async addEdge(edge: SDKEdge): Promise<string> {\n    const edgeId = this.generateEdgeId();\n    \n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'ADD_EDGE',\n        data: {\n          id: edgeId,\n          ...edge,\n          source: DataSource.SDK,\n          timestamp: Date.now()\n        }\n      });\n    }\n    \n    this.emit('edge:added', { edgeId, edge });\n    return edgeId;\n  }\n\n  /**\n   * Track user action/event\n   */\n  async trackAction(actionType: string, data: any): Promise<void> {\n    const actionData = {\n      type: actionType,\n      data,\n      timestamp: Date.now(),\n      url: window.location.href,\n      userAgent: navigator.userAgent\n    };\n    \n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'TRACK_ACTION',\n        data: actionData\n      });\n    }\n    \n    this.emit('action:tracked', actionData);\n  }\n\n  /**\n   * Register for tool notifications\n   */\n  async registerForTools(toolTypes: string[]): Promise<void> {\n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'REGISTER_TOOLS',\n        data: { toolTypes }\n      });\n    }\n    \n    this.emit('tools:registered', { toolTypes });\n  }\n\n  /**\n   * Request user consent for data collection\n   */\n  async requestConsent(dataTypes: string[], purpose: string): Promise<boolean> {\n    if (!this.isExtensionAvailable) {\n      return false;\n    }\n    \n    const response = await this.sendMessage({\n      type: 'REQUEST_CONSENT',\n      data: { dataTypes, purpose }\n    });\n    \n    const granted = response?.granted || false;\n    this.emit('consent:response', { granted, dataTypes, purpose });\n    \n    return granted;\n  }\n\n  /**\n   * Get current user context from extension\n   */\n  async getUserContext(): Promise<any> {\n    if (!this.isExtensionAvailable) {\n      return null;\n    }\n    \n    const response = await this.sendMessage({\n      type: 'GET_USER_CONTEXT'\n    });\n    \n    return response?.context || null;\n  }\n\n  /**\n   * Subscribe to tool activation events\n   */\n  onToolActivated(callback: (tool: ToolContext) => void): void {\n    this.on('tool:activated', callback);\n  }\n\n  /**\n   * Subscribe to graph updates\n   */\n  onGraphUpdated(callback: (update: any) => void): void {\n    this.on('graph:updated', callback);\n  }\n\n  // ============================================================================\n  // Handshake Methods\n  // ============================================================================\n\n  /**\n   * Initiate handshake with Magic Button extension\n   * This will cause the extension sidepanel to flash and display a 6-digit code\n   */\n  async initiateHandshake(request: HandshakeRequest): Promise<HandshakeResponse> {\n    this.log('🤝 Initiating handshake with request:', request);\n    \n    if (!this.isExtensionAvailable) {\n      this.error('❌ Extension not available for handshake');\n      throw new Error('Magic Button extension not available');\n    }\n\n    if (this.handshakeInProgress) {\n      this.warn('⚠️ Handshake already in progress');\n      throw new Error('Handshake already in progress');\n    }\n\n    this.handshakeInProgress = true;\n\n    try {\n      this.log('📤 Sending handshake message to extension...');\n\n      const message = {\n        type: 'INITIATE_HANDSHAKE',\n        data: {\n          siteName: request.siteName,\n          siteUrl: request.siteUrl,\n          permissions: request.permissions,\n          purpose: request.purpose,\n          timestamp: Date.now()\n        }\n      };\n      \n      this.log('📋 Message payload:', message);\n\n      const response = await this.sendMessage(message);\n      \n      this.log('📥 Received handshake response:', response);\n\n      if (response?.success) {\n        this.handshakeSessionId = response.sessionId;\n        this.log('✅ Handshake initiated successfully, session ID:', response.sessionId);\n        this.emit('handshake:initiated', response);\n        return response;\n      } else {\n        this.error('❌ Handshake initiation failed:', response?.error);\n        throw new Error(response?.error || 'Handshake initiation failed');\n      }\n    } catch (error) {\n      this.error('💥 Handshake error:', error);\n      throw error;\n    } finally {\n      this.handshakeInProgress = false;\n    }\n  }\n\n  /**\n   * Complete handshake by submitting the 6-digit code from extension\n   */\n  async submitHandshakeCode(code: string): Promise<boolean> {\n    if (!this.isExtensionAvailable) {\n      throw new Error('Magic Button extension not available');\n    }\n\n    if (!this.handshakeSessionId) {\n      throw new Error('No active handshake session. Call initiateHandshake() first.');\n    }\n\n    // Validate code format (6 digits)\n    if (!/^\\d{6}$/.test(code)) {\n      throw new Error('Code must be exactly 6 digits');\n    }\n\n    this.log('Submitting handshake code:', code);\n\n    try {\n      const response = await this.sendMessage({\n        type: 'SUBMIT_HANDSHAKE_CODE',\n        data: {\n          sessionId: this.handshakeSessionId,\n          code: code,\n          timestamp: Date.now()\n        }\n      });\n\n      if (response?.success) {\n        // Store the JWT token\n        this.accessToken = response.token;\n        this.tokenExpiresAt = response.expiresAt;\n        \n        this.emit('handshake:completed', { \n          sessionId: this.handshakeSessionId,\n          token: response.token,\n          permissions: response.permissions,\n          expiresAt: response.expiresAt\n        });\n        this.log('Handshake completed successfully');\n        return true;\n      } else {\n        this.emit('handshake:failed', { \n          sessionId: this.handshakeSessionId, \n          error: response?.error \n        });\n        throw new Error(response?.error || 'Invalid handshake code');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.emit('handshake:failed', { \n        sessionId: this.handshakeSessionId, \n        error: errorMessage \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel active handshake session\n   */\n  async cancelHandshake(): Promise<void> {\n    if (!this.handshakeSessionId) {\n      return;\n    }\n\n    if (this.isExtensionAvailable) {\n      await this.sendMessage({\n        type: 'CANCEL_HANDSHAKE',\n        data: {\n          sessionId: this.handshakeSessionId,\n          timestamp: Date.now()\n        }\n      });\n    }\n\n    this.emit('handshake:cancelled', { sessionId: this.handshakeSessionId });\n    this.handshakeSessionId = null;\n    this.handshakeInProgress = false;\n  }\n\n  /**\n   * Check if handshake is required for the current site\n   */\n  async checkHandshakeStatus(): Promise<{ required: boolean; sessionId?: string }> {\n    if (!this.isExtensionAvailable) {\n      return { required: false };\n    }\n\n    const response = await this.sendMessage({\n      type: 'CHECK_HANDSHAKE_STATUS',\n      data: {\n        siteUrl: window.location.href,\n        timestamp: Date.now()\n      }\n    });\n\n    return {\n      required: response?.required || false,\n      sessionId: response?.sessionId\n    };\n  }\n\n  /**\n   * Get current handshake session ID\n   */\n  getHandshakeSessionId(): string | null {\n    return this.handshakeSessionId;\n  }\n\n  /**\n   * Check if handshake is in progress\n   */\n  isHandshakeInProgress(): boolean {\n    return this.handshakeInProgress;\n  }\n\n  /**\n   * Open Magic Button sidepanel\n   */\n  async openSidepanel(): Promise<boolean> {\n    if (!this.isExtensionAvailable) {\n      throw new Error('Magic Button extension not available');\n    }\n\n    try {\n      this.log('Opening sidepanel');\n      \n      const response = await this.sendMessage({\n        type: 'OPEN_SIDEPANEL'\n      });\n\n      if (response?.success) {\n        this.emit('sidepanel:opened', { timestamp: Date.now() });\n        return true;\n      } else {\n        throw new Error(response?.error || 'Failed to open sidepanel');\n      }\n    } catch (error) {\n      this.error('Failed to open sidepanel:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current access token\n   */\n  getAccessToken(): string | null {\n    // Check if token is expired\n    if (this.tokenExpiresAt && Date.now() > this.tokenExpiresAt) {\n      this.accessToken = null;\n      this.tokenExpiresAt = null;\n      this.emit('token:expired', { timestamp: Date.now() });\n      return null;\n    }\n    \n    return this.accessToken;\n  }\n\n  /**\n   * Check if SDK is authenticated\n   */\n  isAuthenticated(): boolean {\n    return this.getAccessToken() !== null;\n  }\n\n  /**\n   * Clear authentication token\n   */\n  clearAuthentication(): void {\n    this.accessToken = null;\n    this.tokenExpiresAt = null;\n    this.emit('authentication:cleared', { timestamp: Date.now() });\n  }\n\n  // ============================================================================\n  // Auto-collection Features\n  // ============================================================================\n\n  /**\n   * Enable automatic data collection\n   */\n  private enableAutoCollection(): void {\n    // Track page navigation\n    this.trackPageNavigation();\n    \n    // Track user interactions\n    if (this.config.enableUserTracking) {\n      this.trackUserInteractions();\n    }\n    \n    // Track form submissions\n    this.trackFormSubmissions();\n    \n    // Monitor DOM changes\n    this.monitorDOMChanges();\n  }\n\n  /**\n   * Track page navigation events\n   */\n  private trackPageNavigation(): void {\n    // Track initial page load\n    this.trackAction('page_loaded', this.collectPageData());\n    \n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.trackAction('page_unloaded', {\n        url: window.location.href,\n        timeOnPage: Date.now() - (window as any).__magicButtonPageLoadTime\n      });\n    });\n    \n    // Track history changes (SPA navigation)\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    \n    history.pushState = (...args) => {\n      originalPushState.apply(history, args);\n      this.trackAction('navigation', { \n        type: 'pushState', \n        url: window.location.href \n      });\n    };\n    \n    history.replaceState = (...args) => {\n      originalReplaceState.apply(history, args);\n      this.trackAction('navigation', { \n        type: 'replaceState', \n        url: window.location.href \n      });\n    };\n    \n    window.addEventListener('popstate', () => {\n      this.trackAction('navigation', { \n        type: 'popstate', \n        url: window.location.href \n      });\n    });\n  }\n\n  /**\n   * Track user interactions\n   */\n  private trackUserInteractions(): void {\n    // Track clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as Element;\n      this.trackAction('click', {\n        tagName: target.tagName,\n        className: target.className,\n        id: target.id,\n        href: target.getAttribute('href'),\n        x: event.clientX,\n        y: event.clientY\n      });\n    });\n    \n    // Track scroll\n    let scrollTimeout: number;\n    window.addEventListener('scroll', () => {\n      clearTimeout(scrollTimeout);\n      scrollTimeout = window.setTimeout(() => {\n        this.trackAction('scroll', {\n          scrollY: window.scrollY,\n          scrollX: window.scrollX,\n          documentHeight: document.documentElement.scrollHeight,\n          viewportHeight: window.innerHeight\n        });\n      }, 500);\n    });\n  }\n\n  /**\n   * Track form submissions\n   */\n  private trackFormSubmissions(): void {\n    document.addEventListener('submit', (event) => {\n      const form = event.target as HTMLFormElement;\n      const formData = new FormData(form);\n      const data: Record<string, any> = {};\n      \n      // Only collect non-sensitive data\n      for (const [key, value] of formData.entries()) {\n        if (!this.isSensitiveField(key)) {\n          data[key] = value;\n        }\n      }\n      \n      // Count form fields\n      const fieldCount = Array.from(formData.entries()).length;\n      \n      this.trackAction('form_submitted', {\n        action: form.action,\n        method: form.method,\n        fieldCount: fieldCount,\n        hasFileUpload: Array.from(form.elements).some(el => \n          el instanceof HTMLInputElement && el.type === 'file'\n        )\n      });\n    });\n  }\n\n  /**\n   * Monitor DOM changes for dynamic content\n   */\n  private monitorDOMChanges(): void {\n    const observer = new MutationObserver((mutations) => {\n      let hasSignificantChanges = false;\n      \n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          hasSignificantChanges = true;\n        }\n      });\n      \n      if (hasSignificantChanges) {\n        this.trackAction('dom_updated', {\n          mutationCount: mutations.length,\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Check if a field name indicates sensitive data\n   */\n  private isSensitiveField(fieldName: string): boolean {\n    const sensitivePatterns = [\n      /password/i,\n      /ssn|social/i,\n      /credit|card/i,\n      /cvv|cvc/i,\n      /bank/i,\n      /secret/i,\n      /token/i,\n      /api[_-]?key/i\n    ];\n    \n    return sensitivePatterns.some(pattern => pattern.test(fieldName));\n  }\n\n  // ============================================================================\n  // Utility Methods\n  // ============================================================================\n\n  /**\n   * Send message to extension\n   */\n  private async sendMessage(message: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!this.isExtensionAvailable) {\n        this.warn('⚠️ Extension not available, queueing message:', message.type);\n        this.messageQueue.push(message);\n        resolve(null);\n        return;\n      }\n      \n      const messageId = this.generateMessageId();\n      this.log('📤 Sending message to extension:', { messageId, type: message.type });\n      \n      const timeout = setTimeout(() => {\n        this.error('⏰ Message timeout for:', { messageId, type: message.type });\n        reject(new Error(`Message timeout for ${message.type}`));\n      }, 5000);\n      \n      const listener = (event: MessageEvent) => {\n        if (event.source === window && \n            event.data.type === 'MAGICBUTTON_SDK_RESPONSE' &&\n            event.data.messageId === messageId) {\n          \n          this.log('📥 Received response for message:', { messageId, type: message.type });\n          clearTimeout(timeout);\n          window.removeEventListener('message', listener);\n          \n          if (event.data.error) {\n            this.error('❌ Extension returned error:', event.data.error);\n            reject(new Error(event.data.error));\n          } else {\n            resolve(event.data.response);\n          }\n        }\n      };\n      \n      window.addEventListener('message', listener);\n      \n      // Include token in message if available\n      const messageWithAuth = {\n        ...message,\n        token: this.getAccessToken()\n      };\n\n      const postMessagePayload = {\n        type: 'MAGICBUTTON_SDK_MESSAGE',\n        messageId,\n        payload: messageWithAuth\n      };\n      \n      this.log('📨 PostMessage payload:', postMessagePayload);\n      \n      window.postMessage(postMessagePayload, window.location.origin);\n    });\n  }\n\n  /**\n   * Process queued messages\n   */\n  private async processMessageQueue(): Promise<void> {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      try {\n        await this.sendMessage(message);\n      } catch (error) {\n        this.error('Failed to send queued message:', error);\n      }\n    }\n  }\n\n  /**\n   * Handle messages from extension\n   */\n  private handleExtensionMessage(data: any): void {\n    switch (data.type) {\n      case 'TOOL_ACTIVATED':\n        this.emit('tool:activated', data.tool);\n        break;\n      case 'GRAPH_UPDATED':\n        this.emit('graph:updated', data.update);\n        break;\n      case 'CONSENT_REQUEST':\n        this.handleConsentRequest(data);\n        break;\n      case 'HANDSHAKE_CODE_GENERATED':\n        this.emit('handshake:code-generated', data);\n        break;\n      case 'HANDSHAKE_EXPIRED':\n        this.emit('handshake:expired', data);\n        this.handshakeSessionId = null;\n        this.handshakeInProgress = false;\n        break;\n      case 'HANDSHAKE_SIDEPANEL_FLASH':\n        this.emit('handshake:sidepanel-flash', data);\n        break;\n      default:\n        this.log('Unknown message from extension:', data);\n    }\n  }\n\n  /**\n   * Handle consent request from extension\n   */\n  private handleConsentRequest(data: any): void {\n    // This could show a custom consent UI\n    const granted = confirm(`Allow Magic Button Player to access ${data.dataTypes.join(', ')} for ${data.purpose}?`);\n    \n    window.postMessage({\n      type: 'MAGICBUTTON_SDK_CONSENT_RESPONSE',\n      requestId: data.requestId,\n      granted\n    }, window.location.origin);\n  }\n\n  // ============================================================================\n  // Event System\n  // ============================================================================\n\n  /**\n   * Subscribe to SDK events\n   */\n  on(eventType: string, handler: Function): void {\n    if (!this.eventHandlers.has(eventType)) {\n      this.eventHandlers.set(eventType, []);\n    }\n    this.eventHandlers.get(eventType)!.push(handler);\n  }\n\n  /**\n   * Unsubscribe from SDK events\n   */\n  off(eventType: string, handler?: Function): void {\n    if (!this.eventHandlers.has(eventType)) return;\n    \n    if (handler) {\n      const handlers = this.eventHandlers.get(eventType)!;\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    } else {\n      this.eventHandlers.delete(eventType);\n    }\n  }\n\n  /**\n   * Emit SDK event\n   */\n  private emit(eventType: string, data?: any): void {\n    const handlers = this.eventHandlers.get(eventType) || [];\n    handlers.forEach(handler => {\n      try {\n        handler(data);\n      } catch (error) {\n        this.error('Event handler error:', error);\n      }\n    });\n  }\n\n  // ============================================================================\n  // ID Generation\n  // ============================================================================\n\n  private generateNodeId(): string {\n    return `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateEdgeId(): string {\n    return `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // ============================================================================\n  // Logging\n  // ============================================================================\n\n  private log(...args: any[]): void {\n    if (this.config.debug) {\n      console.log('[MagicButton SDK]', ...args);\n    }\n  }\n\n  private error(...args: any[]): void {\n    console.error('[MagicButton SDK]', ...args);\n  }\n}\n\n// ============================================================================\n// Global SDK Instance\n// ============================================================================\n\ndeclare global {\n  interface Window {\n    MagicButton?: MagicButtonSDK;\n    __MagicButtonSDK?: MagicButtonSDK;\n  }\n}\n\n/**\n * Auto-initialize SDK if window.MagicButtonConfig is present\n */\nif (typeof window !== 'undefined') {\n  // Mark page load time for tracking\n  (window as any).__magicButtonPageLoadTime = Date.now();\n  \n  // Check for global config\n  const globalConfig = (window as any).MagicButtonConfig;\n  if (globalConfig || (window as any).MagicButtonAutoInit) {\n    const sdk = new MagicButtonSDK(globalConfig);\n    window.MagicButton = sdk;\n    window.__MagicButtonSDK = sdk;\n    \n    // Auto-initialize\n    sdk.initialize().then(success => {\n      if (success) {\n        console.log('[MagicButton] SDK initialized successfully');\n      }\n    });\n  }\n}\n\nexport default MagicButtonSDK;\nexport { MagicButtonSDK };"],"names":["DataSource"],"mappings":"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"}